  // Wait for message to be received
  twai_message_t message;
  if (twai_receive(&message, pdMS_TO_TICKS(10000)) == ESP_OK)
  {
    printf("Message received\n");
  }
  else
  {
    printf("Failed to receive message\n");
    return;
  }

  // Process received message
  if (message.extd)
  {
    printf("Message is in Extended Format\n");
  }
  else
  {
    printf("Message is in Standard Format\n");
  }
  printf("ID is %d\n", message.identifier);
  if (!(message.rtr))
  {
    for (int i = 0; i < message.data_length_code; i++)
    {
      printf("Data byte %d = %d\n", i, message.data[i]);
    }
  }

  // twai_message_t message;
  String data;
  String identifier;
  /*if (twai_receive(&message, 0) == ESP_OK) {
    Serial.print("0x");
    Serial.print(message.identifier, HEX);
    Serial.print("\t");
    Serial.print(message.extd);
    Serial.print("\t");
    Serial.print(message.rtr);
    Serial.print("\t");
    Serial.print(message.data_length_code);

    for(int i=0;i<message.data_length_code;i++) {
      Serial.print("\t0x");
      if (message.data[i]<=0x0F) {
        Serial.print(0);
      }
      Serial.print(message.data[i], HEX);
    }
    Serial.println();
  }*/

  if (testTimer4.delayOn(initScreen, 1000))
  {
    _ui_screen_change(&ui_MainScreen, LV_SCR_LOAD_ANIM_OVER_RIGHT, 100, 0, ui_MainScreen_screen_init);

    if (lv_scr_act() == ui_WelcomeScreen)
    {
      initScreen = false;
      _ui_screen_delete(&ui_WelcomeScreen);
    }
  }

  if (lv_scr_act() == ui_MainScreen && true)
  {
    lv_bar_set_value(ui_RpmsBar, random(8, 15), LV_ANIM_OFF);
    lv_label_set_text_fmt(ui_RpmsValue, "%d", random(800, 1500));

    if (lv_bar_get_value(ui_RpmsBar) >= 50 && entry)
    {
      lv_obj_set_style_bg_color(ui_RpmsBar, lv_color_hex(0xFF0000), LV_PART_INDICATOR | LV_STATE_DEFAULT);
      entry = false;
    }

    if (lv_bar_get_value(ui_RpmsBar) >= 100)
    {
      lv_obj_set_style_bg_color(ui_RpmsBar, lv_color_hex(0xFFFFFF), LV_PART_INDICATOR | LV_STATE_DEFAULT);
      entry = true;
      lv_bar_set_value(ui_RpmsBar, 0, LV_ANIM_OFF);
    }

    lv_arc_set_value(ui_Arc1, random(45, 48));
    lv_label_set_text_fmt(ui_ArcValue1, "%d", random(45, 48));

    lv_arc_set_value(ui_Arc2, random(10, 15));
    lv_label_set_text_fmt(ui_ArcValue2, "%d", random(10, 15));
    lv_arc_set_value(ui_Arc4, random(50, 60));
    lv_label_set_text_fmt(ui_ArcValue4, "%d", random(50, 60));

    lv_arc_set_value(ui_MainArc, random(30, 90));
    lv_label_set_text_fmt(ui_MainArcValue, "%d", random(30, 90));

    lv_label_set_text_fmt(ui_PanelValue1, "%d", random(100));

    lv_label_set_text_fmt(ui_PanelValue2, "%d", random(100));
    lv_label_set_text_fmt(ui_PanelValue4, "%d", random(100));
    lv_label_set_text_fmt(ui_PanelValue5, "%d", random(100));

    lv_label_set_text_fmt(ui_SpeedValue, "%d", random(80, 85));

    lv_bar_set_value(ui_TpsBar, random(50, 60), LV_ANIM_OFF);

    if (testTimer.cycleTrigger(500))
    {

      lv_label_set_text_fmt(ui_PanelValue6, "%d", random(90, 98));

      lv_bar_set_value(ui_Bar2, random(50, 52), LV_ANIM_OFF);
      lv_label_set_text_fmt(ui_BarValue2, "%d", random(100));

      lv_label_set_text_fmt(ui_GearValue, "%d", random(7));
    }

    if (testTimer2.cycleTrigger(1000))
    {

      lv_bar_set_value(ui_Bar1, random(80, 82), LV_ANIM_OFF);
      lv_label_set_text_fmt(ui_BarValue1, "%d", random(80, 82));

      lv_bar_set_value(ui_Bar3, random(40, 50), LV_ANIM_OFF);
      lv_label_set_text_fmt(ui_BarValue2, "%d", random(40, 50));

      lv_bar_set_value(ui_Bar4, random(70, 75), LV_ANIM_OFF);
      lv_label_set_text_fmt(ui_BarValue4, "%d", random(70, 75));

      lv_arc_set_value(ui_Arc3, random(95, 105));
      lv_label_set_text_fmt(ui_ArcValue3, "%d", random(95, 105));

      lv_label_set_text_fmt(ui_PanelValue3, "%d", random(85, 87));
    }
  }

  if (lv_scr_act() == ui_Screen2 && true)
  {
    /* if(twai_receive(&message, 0)  ==  ESP_OK){
       lv_label_set_text_fmt(ui_mID, "ID: 0x%08X", message.identifier);
       lv_label_set_text_fmt(ui_mData, "Data: 0x%02X", message.data);
       }*/
  }



board_build.arduino.memory_type
-DBOARD_HAS_PSRAM 






#include "Adafruit_NeoPixel.h"
#include "Arduino.h"
#include "pcb_definitions.h"
#include "led_control.h"

Adafruit_NeoPixel strip(LEDS_NUM, LEDS_PIN, NEO_GRB + NEO_KHZ800);

void led_control::init_leds()
{
    strip.begin();
    strip.show(); // Initialize all pixels to 'off'
    strip.setBrightness(10);

    xTaskCreatePinnedToCore(this->ledsWelcomeAnimation, "leds_Welcome", 10000, NULL, 1, NULL, APP_CPU_NUM);
}

void led_control::ledsWelcomeAnimation(void *pvParameters)
{
    while (1)
    {
        int firstPixelHue = 0; // First pixel starts at red (hue 0)
        for (int a = 0; a < 10; a++)
        { // Repeat 30 times...
            for (int b = 0; b < 3; b++)
            {                  //  'b' counts from 0 to 2...
                strip.clear(); //   Set all pixels in RAM to 0 (off)
                // 'c' counts up from 'b' to end of strip in increments of 3...
                for (int c = b; c < strip.numPixels(); c += 3)
                {
                    // hue of pixel 'c' is offset by an amount to make one full
                    // revolution of the color wheel (range 65536) along the length
                    // of the strip (strip.numPixels() steps):
                    int hue = firstPixelHue + c * 65536L / strip.numPixels();
                    uint32_t color = strip.gamma32(strip.ColorHSV(hue)); // hue -> RGB
                    strip.setPixelColor(c, color);                       // Set pixel 'c' to value 'color'
                }
                strip.show();                // Update strip with new contents
                delay(50);                 // Pause for a moment
                firstPixelHue += 65536 / 90; // One cycle of color wheel over 90 frames
            }
        }

        strip.clear();
        strip.show();
        vTaskDelete(NULL);
    }
}


https://github.com/adafruit/Adafruit_NeoPixel.git

#define NUM_DMA_BUFFERS 10
#include "FastLED.h"
#include "Arduino.h"
#include "pcb_definitions.h"
#include "led_control.h"
#include "../canBus/can_bus.h"

CRGB strip[LEDS_NUM];

TaskHandle_t ledWelcomeAnimTask;

bool initAnimationComplete = false;

void led_control::init_leds()
{

    FastLED.addLeds<WS2812B, LEDS_PIN, GRB>(strip, LEDS_NUM);
    FastLED.setBrightness(100);
    FastLED.show();

    xTaskCreatePinnedToCore(this->ledsWelcomeAnimation, "leds_Welcome", 10000, NULL, 1, &ledWelcomeAnimTask, APP_CPU_NUM);
    xTaskCreatePinnedToCore(ledControlTask, "ledControlTask", 10000, NULL, 4, NULL, 0);
}

void led_control::ledsWelcomeAnimation(void *pvParameters)
{
    while (1)
    {
        static uint8_t hue = 0;

        // First slide the led in one direction
        for (int i = 0; i < LEDS_NUM; i++)
        {
            // Set the i'th led to red
            strip[i] = CHSV(hue += 5, 255, 255);

            // Show the leds
            FastLED.show();
            // now that we've shown the leds, reset the i'th led to black
            // strip[i] = CRGB::Black;
            for (int i = 0; i < LEDS_NUM; i++)
            {
                strip[i].nscale8(250);
            }
            // Wait a little bit before we loop around and do it again
            delay(50);
        }

        delay(500);

        for (int i = (LEDS_NUM)-1; i >= 0; i--)
        {
            // Set the i'th led to red
            strip[i] = CHSV(hue += 5, 255, 255);
            // Show the leds
            FastLED.show();
            // now that we've shown the leds, reset the i'th led to black
            strip[i] = CRGB::Black;
            for (int i = 0; i < LEDS_NUM; i++)
            {
                strip[i].nscale8(250);
            }
            // Wait a little bit before we loop around and do it again
            delay(25);
        }

        FastLED.clear();
        FastLED.show();
        initAnimationComplete = true;
        vTaskSuspend(NULL);
    }
}

void led_control::triggerWelcomeAnimation()
{
    initAnimationComplete = false;
    vTaskResume(ledWelcomeAnimTask);
}

void led_control::setRmpsLeds(int rpms, int minRpms, int maxRpms)
{
    int ledsOn = map(rpms, minRpms, maxRpms, LEDS_RPMS_START, LEDS_RPMS_END);

    for (int i = LEDS_RPMS_START; i < LEDS_RPMS_END; i++)
    {
        strip[i] = CRGB::Black;
    }

    if (rpms < maxRpms)
    {

        for (int i = LEDS_RPMS_START; i < ledsOn; i++)
        {
            if (i >= LEDS_RPMS_LOW && i <= LEDS_RPMS_MID)
            {
                strip[i] = CRGB::Green;
            }
            else if (i >= LEDS_RPMS_MID && i <= LEDS_RPMS_MAX)
            {
                strip[i] = CRGB::Red;
            }
            else
            {
                strip[i] = CRGB::Blue;
            }
        }
        FastLED.show();
    }
    else
    {
        EVERY_N_MILLISECONDS(10)
        {
            static boolean ps0; // stores the pixel state
            ps0 = !ps0;         // toggle on/off state
            if (ps0 == 1)
            {
                for (int i = LEDS_RPMS_START; i < LEDS_RPMS_END; i++)
                {
                    strip[i] = CRGB::Red;
                }
            }
            else
            {
                for (int i = LEDS_RPMS_START; i < LEDS_RPMS_END; i++)
                {
                    strip[i] = CRGB::Black;
                }
            }

            FastLED.show();
        } // reset
    }
}

/*
void led_control::setIndicatorLeds(ledState state, ledPosition position, ledColor color)
{

    if (state == LED_ON)
    {
        strip[position] = color;
        FastLED.show();
    }
    else if (state == LED_OFF)
    {
        strip[position] = CRGB::Black;
        FastLED.show();
    }
    else if (state == LED_BLINK)
    {
        EVERY_N_MILLISECONDS(250)
        {
            static boolean ps0; // stores the pixel state
            ps0 = !ps0;         // toggle on/off state
            if (ps0 == 1)
            {
                strip[position] = color;
            }
            else
            {
                strip[position] = CRGB::Black;
            }

            FastLED.show();
        } // reset
    }
}
*/

void ledControlTask(void *pvParameters)
{

    canbus_data_t canbus_data;
    int ledsOn = 0;

    while (1)
    {
        if (xQueueReceive(canbus_queue, &canbus_data, portMAX_DELAY) == pdTRUE  && initAnimationComplete)
        {
            ledsOn = map(canbus_data.rpms, 3000, 6000, LEDS_RPMS_START, LEDS_RPMS_END);

            for (int i = LEDS_RPMS_START; i < LEDS_RPMS_END; i++)
            {
                strip[i] = CRGB::Black;
            }

            if (canbus_data.rpms < 6000)
            {

                for (int i = LEDS_RPMS_START; i < ledsOn; i++)
                {
                    if (i >= LEDS_RPMS_LOW && i <= LEDS_RPMS_MID)
                    {
                        strip[i] = CRGB::Green;
                    }
                    else if (i >= LEDS_RPMS_MID && i <= LEDS_RPMS_MAX)
                    {
                        strip[i] = CRGB::Red;
                    }
                    else
                    {
                        strip[i] = CRGB::Blue;
                    }
                }
                FastLED.show();
            }
            else
            {
                EVERY_N_MILLISECONDS(100)
                {
                    static boolean ps0; // stores the pixel state
                    ps0 = !ps0;         // toggle on/off state
                    if (ps0 == 1)
                    {
                        for (int i = LEDS_RPMS_START; i < LEDS_RPMS_END; i++)
                        {
                            strip[i] = CRGB::Red;
                        }
                    }
                    else
                    {
                        for (int i = LEDS_RPMS_START; i < LEDS_RPMS_END; i++)
                        {
                            strip[i] = CRGB::Black;
                        }
                    }

                    FastLED.show();
                } // reset
            }
           delay(10); 
        }
    }
}


https://github.com/FastLED/FastLED.git





if (lv_scr_act() == ui_SettingsScreen)
        {
            // Get the roller active item
            switch (lv_roller_get_selected(ui_Roller))
            {
            case 0: // Rpms settings
                if (firstTimeRpms)
                {
                    _ui_flag_modify(ui_SelectPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                    _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                    _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                    _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.RpmsWAText.c_str());
                    _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.RpmsDAText.c_str());
                    lv_slider_set_range(ui_HWASlider, 0, 10000);
                    lv_slider_set_range(ui_HDASlider, 5000, 10000);
                    _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, db.getRpmsWarning());
                    _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, db.getRpmsRedline());
                    _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getRpmsWarning()).c_str());
                    _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getRpmsRedline()).c_str());
                    firstTimeRpms = false;
                    firstTimeArcs = true;
                    firstTimeBars = true;
                    firstTimePanels = true;
                }
                break;
            case 1:
            { // Bars

                if (firstTimeBars)
                {
                    // Show the select panel
                    _ui_flag_modify(ui_SelectPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                    _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                    _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                    // Setup the dropdowns
                    lv_dropdown_clear_options(ui_GaugeNumberD);
                    lv_dropdown_set_options(ui_GaugeNumberD, bar_number_options.c_str());
                    lv_dropdown_set_selected(ui_GaugeNumberD, 0);
                    lv_dropdown_clear_options(ui_GaugeTypeD);
                    lv_dropdown_set_options(ui_GaugeTypeD, bar_options.c_str());
                    lv_dropdown_set_selected(ui_GaugeTypeD, (int)(db.getBarGaugeType(bar_number_t::BAR_1)));
                }

                uint8_t rawBarNumber = (uint8_t)(lv_dropdown_get_selected(ui_GaugeNumberD) + 1);
                bar_number_t selectedGaugeNum = (bar_number_t)rawBarNumber;
                gauge_type selectedGaugeType = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);

                if (previousBarNumber != lv_dropdown_get_selected(ui_GaugeNumberD))
                {
                    barChanged = true;
                    previousBarNumber = lv_dropdown_get_selected(ui_GaugeNumberD);
                    lv_dropdown_set_selected(ui_GaugeTypeD, (int)(db.getBarGaugeType(selectedGaugeNum)));
                }

                if (previousBarType != lv_dropdown_get_selected(ui_GaugeTypeD) || barChanged)
                {
                    barTypeChanged = true;
                    previousBarType = lv_dropdown_get_selected(ui_GaugeTypeD);
                    selectedGaugeType = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);
                }

                // Set the options for each gauge type possible for BAR 1
                if (barChanged || barTypeChanged)
                {
                    switch (selectedGaugeType)
                    {
                    case gauge_type::COOLANT_TEMP:
                    case gauge_type::OIL_TEMP:
                    case gauge_type::AIR_TEMP:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HWAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HAText.c_str());
                        _ui_label_set_property(ui_LWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.TempLWAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x050154), LV_PART_MAIN | LV_STATE_DEFAULT);

                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0x0000FF), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0x0000FF), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, getTemp_Number(TEMP_MIN_VALUE), getTemp_Number(TEMP_MAX_VALUE));
                        lv_slider_set_range(ui_HDASlider, getTemp_Number(TEMP_MIN_VALUE), getTemp_Number(TEMP_MAX_VALUE));
                        lv_slider_set_range(ui_LWASlider, getTemp_Number(TEMP_MIN_VALUE), getTemp_Number(TEMP_MAX_VALUE));

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, getTemp_Number(db.getBarGaugeHighWarningValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, getTemp_Number(db.getBarGaugeHighAlertValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_LWASlider, _UI_SLIDER_PROPERTY_VALUE, getTemp_Number(db.getBarGaugeLowWarningValue(selectedGaugeNum)));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, getTemp_String(db.getBarGaugeHighWarningValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, getTemp_String(db.getBarGaugeHighAlertValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_LWALabel, _UI_LABEL_PROPERTY_TEXT, getTemp_String(db.getBarGaugeLowWarningValue(selectedGaugeNum)).c_str());

                        break;

                    case gauge_type::OIL_PRESSURE:
                    case gauge_type::FUEL_PRESSURE:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HWAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HAText.c_str());
                        _ui_label_set_property(ui_LWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.LWAText.c_str());
                        _ui_label_set_property(ui_LDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.LDAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x262700), LV_PART_MAIN | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, getPressure_Number(PRESSURE_MIN_VALUE), getPressure_Number(PRESSURE_MAX_VALUE));
                        lv_slider_set_range(ui_HDASlider, getPressure_Number(PRESSURE_MIN_VALUE), getPressure_Number(PRESSURE_MAX_VALUE));
                        lv_slider_set_range(ui_LWASlider, getPressure_Number(PRESSURE_MIN_VALUE), getPressure_Number(PRESSURE_MAX_VALUE));
                        lv_slider_set_range(ui_LDASlider, getPressure_Number(PRESSURE_MIN_VALUE), getPressure_Number(PRESSURE_MAX_VALUE));

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getBarGaugeHighWarningValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getBarGaugeHighAlertValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_LWASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getBarGaugeLowWarningValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_LDASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getBarGaugeLowAlertValue(selectedGaugeNum)));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getBarGaugeHighWarningValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getBarGaugeHighAlertValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_LWALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getBarGaugeLowWarningValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_LDALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getBarGaugeLowAlertValue(selectedGaugeNum)).c_str());

                        break;

                    case gauge_type::MANIFOLD_PRESSURE:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.WAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.DAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x262700), LV_PART_MAIN | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, getPressure_Number(MANIFOLD_MIN_VALUE), getPressure_Number(MANIFOLD_MAX_VALUE));
                        lv_slider_set_range(ui_HDASlider, getPressure_Number(MANIFOLD_MIN_VALUE), getPressure_Number(MANIFOLD_MAX_VALUE));

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getBarGaugeHighWarningValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getBarGaugeHighAlertValue(selectedGaugeNum)));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getBarGaugeHighWarningValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getBarGaugeHighAlertValue(selectedGaugeNum)).c_str());

                        break;

                    case gauge_type::BATTERY_VOLTAGE:

                        // TODO: add different callback fuctions to set the values for the sliders as voltage whit decimals

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HWAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HAText.c_str());
                        _ui_label_set_property(ui_LWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.LWAText.c_str());
                        _ui_label_set_property(ui_LDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.LDAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x262700), LV_PART_MAIN | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, getBatteryVoltage_Number(VOLTAGE_MIN_VALUE), getBatteryVoltage_Number(VOLTAGE_MAX_VALUE));
                        lv_slider_set_range(ui_HDASlider, getBatteryVoltage_Number(VOLTAGE_MIN_VALUE), getBatteryVoltage_Number(VOLTAGE_MAX_VALUE));
                        lv_slider_set_range(ui_LWASlider, getBatteryVoltage_Number(VOLTAGE_MIN_VALUE), getBatteryVoltage_Number(VOLTAGE_MAX_VALUE));
                        lv_slider_set_range(ui_LDASlider, getBatteryVoltage_Number(VOLTAGE_MIN_VALUE), getBatteryVoltage_Number(VOLTAGE_MAX_VALUE));

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, getBatteryVoltage_Number(db.getBarGaugeHighWarningValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, getBatteryVoltage_Number(db.getBarGaugeHighAlertValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_LWASlider, _UI_SLIDER_PROPERTY_VALUE, getBatteryVoltage_Number(db.getBarGaugeLowWarningValue(selectedGaugeNum)));
                        _ui_slider_set_property(ui_LDASlider, _UI_SLIDER_PROPERTY_VALUE, getBatteryVoltage_Number(db.getBarGaugeLowAlertValue(selectedGaugeNum)));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, getBatteryVoltage_String(db.getBarGaugeHighWarningValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, getBatteryVoltage_String(db.getBarGaugeHighAlertValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_LWALabel, _UI_LABEL_PROPERTY_TEXT, getBatteryVoltage_String(db.getBarGaugeLowWarningValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_LDALabel, _UI_LABEL_PROPERTY_TEXT, getBatteryVoltage_String(db.getBarGaugeLowAlertValue(selectedGaugeNum)).c_str());

                        break;

                    case gauge_type::FUEL_LEVEL:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_LWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.WALevelText.c_str());
                        _ui_label_set_property(ui_LDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.DALevelText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x262700), LV_PART_MAIN | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_LWASlider, LEVEL_MIN_VALUE, LEVEL_MAX_VALUE);
                        lv_slider_set_range(ui_LDASlider, LEVEL_MIN_VALUE, LEVEL_MAX_VALUE);

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_LWASlider, _UI_SLIDER_PROPERTY_VALUE, db.getBarGaugeLowWarningValue(selectedGaugeNum));
                        _ui_slider_set_property(ui_LDASlider, _UI_SLIDER_PROPERTY_VALUE, db.getBarGaugeLowAlertValue(selectedGaugeNum));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_LWALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getBarGaugeLowWarningValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_LDALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getBarGaugeLowAlertValue(selectedGaugeNum)).c_str());

                        break;

                    case gauge_type::INJ_DUTY:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.WAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.DAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, VOLTAGE_MIN_VALUE, VOLTAGE_MAX_VALUE);
                        lv_slider_set_range(ui_HDASlider, VOLTAGE_MIN_VALUE, VOLTAGE_MAX_VALUE);

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, db.getBarGaugeHighWarningValue(selectedGaugeNum));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, db.getBarGaugeHighAlertValue(selectedGaugeNum));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getBarGaugeHighWarningValue(selectedGaugeNum)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getBarGaugeHighAlertValue(selectedGaugeNum)).c_str());

                        break;
                    }
                }

                firstTimeBars = false;
                firstTimeArcs = true;
                firstTimeRpms = true;
                firstTimePanels = true;
                barChanged = false;
                barTypeChanged = false;
                arcChanged = true;
                arcTypeChanged = true;
                panelChanged = true;
                panelTypeChanged = true;
            }
            break;

            case 2:
            { // Arcs

                if (firstTimeArcs)
                {
                    // Show the select panel
                    _ui_flag_modify(ui_SelectPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                    _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                    _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                    // Setup the dropdowns
                    lv_dropdown_clear_options(ui_GaugeNumberD);
                    lv_dropdown_set_options(ui_GaugeNumberD, arc_number_options.c_str());
                    lv_dropdown_set_selected(ui_GaugeNumberD, 0);
                    lv_dropdown_clear_options(ui_GaugeTypeD);
                    lv_dropdown_set_options(ui_GaugeTypeD, arc_options.c_str());
                    lv_dropdown_set_selected(ui_GaugeTypeD, (int)(db.getArcGaugeType(arc_number::ARC_1)));
                }

                uint8_t rawArcNumber = (uint8_t)(lv_dropdown_get_selected(ui_GaugeNumberD) + 1);
                arc_number selectedGaugeNumArc = (arc_number)rawArcNumber;
                gauge_type selectedGaugeTypeArc = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);

                if (previousArcNumber != lv_dropdown_get_selected(ui_GaugeNumberD))
                {
                    arcChanged = true;
                    previousArcNumber = lv_dropdown_get_selected(ui_GaugeNumberD);
                    lv_dropdown_set_selected(ui_GaugeTypeD, (int)(db.getArcGaugeType(selectedGaugeNumArc)));
                }

                if (previousArcType != lv_dropdown_get_selected(ui_GaugeTypeD) || arcChanged)
                {
                    arcTypeChanged = true;
                    previousArcType = lv_dropdown_get_selected(ui_GaugeTypeD);
                    selectedGaugeTypeArc = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);
                }

                // Set the options for each gauge type possible for BAR 1
                if (arcChanged || arcTypeChanged)
                {
                    switch (selectedGaugeTypeArc)
                    {
                    case gauge_type::COOLANT_TEMP:
                    case gauge_type::OIL_TEMP:
                    case gauge_type::AIR_TEMP:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HWAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HAText.c_str());
                        _ui_label_set_property(ui_LWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.TempLWAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x050154), LV_PART_MAIN | LV_STATE_DEFAULT);

                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0x0000FF), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0x0000FF), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, getTemp_Number(TEMP_MIN_VALUE), getTemp_Number(TEMP_MAX_VALUE));
                        lv_slider_set_range(ui_HDASlider, getTemp_Number(TEMP_MIN_VALUE), getTemp_Number(TEMP_MAX_VALUE));
                        lv_slider_set_range(ui_LWASlider, getTemp_Number(TEMP_MIN_VALUE), getTemp_Number(TEMP_MAX_VALUE));

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, getTemp_Number(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, getTemp_Number(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_LWASlider, _UI_SLIDER_PROPERTY_VALUE, getTemp_Number(db.getArcGaugeLowWarningValue(selectedGaugeNumArc)));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, getTemp_String(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, getTemp_String(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_LWALabel, _UI_LABEL_PROPERTY_TEXT, getTemp_String(db.getArcGaugeLowWarningValue(selectedGaugeNumArc)).c_str());

                        break;

                    case gauge_type::OIL_PRESSURE:
                    case gauge_type::FUEL_PRESSURE:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HWAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HAText.c_str());
                        _ui_label_set_property(ui_LWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.LWAText.c_str());
                        _ui_label_set_property(ui_LDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.LDAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x262700), LV_PART_MAIN | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, getPressure_Number(PRESSURE_MIN_VALUE), getPressure_Number(PRESSURE_MAX_VALUE));
                        lv_slider_set_range(ui_HDASlider, getPressure_Number(PRESSURE_MIN_VALUE), getPressure_Number(PRESSURE_MAX_VALUE));
                        lv_slider_set_range(ui_LWASlider, getPressure_Number(PRESSURE_MIN_VALUE), getPressure_Number(PRESSURE_MAX_VALUE));
                        lv_slider_set_range(ui_LDASlider, getPressure_Number(PRESSURE_MIN_VALUE), getPressure_Number(PRESSURE_MAX_VALUE));

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_LWASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getArcGaugeLowWarningValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_LDASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getArcGaugeLowAlertValue(selectedGaugeNumArc)));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_LWALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getArcGaugeLowWarningValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_LDALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getArcGaugeLowAlertValue(selectedGaugeNumArc)).c_str());

                        break;

                    case gauge_type::MANIFOLD_PRESSURE:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.WAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.DAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x262700), LV_PART_MAIN | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, getPressure_Number(MANIFOLD_MIN_VALUE), getPressure_Number(MANIFOLD_MAX_VALUE));
                        lv_slider_set_range(ui_HDASlider, getPressure_Number(MANIFOLD_MIN_VALUE), getPressure_Number(MANIFOLD_MAX_VALUE));

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, getPressure_Number(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, getPressure_String(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)).c_str());

                        break;

                    case gauge_type::BATTERY_VOLTAGE:

                        // TODO: add different callback fuctions to set the values for the sliders as voltage whit decimals

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HWAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.HAText.c_str());
                        _ui_label_set_property(ui_LWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.LWAText.c_str());
                        _ui_label_set_property(ui_LDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.LDAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x262700), LV_PART_MAIN | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, getBatteryVoltage_Number(VOLTAGE_MIN_VALUE), getBatteryVoltage_Number(VOLTAGE_MAX_VALUE));
                        lv_slider_set_range(ui_HDASlider, getBatteryVoltage_Number(VOLTAGE_MIN_VALUE), getBatteryVoltage_Number(VOLTAGE_MAX_VALUE));
                        lv_slider_set_range(ui_LWASlider, getBatteryVoltage_Number(VOLTAGE_MIN_VALUE), getBatteryVoltage_Number(VOLTAGE_MAX_VALUE));
                        lv_slider_set_range(ui_LDASlider, getBatteryVoltage_Number(VOLTAGE_MIN_VALUE), getBatteryVoltage_Number(VOLTAGE_MAX_VALUE));

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, getBatteryVoltage_Number(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, getBatteryVoltage_Number(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_LWASlider, _UI_SLIDER_PROPERTY_VALUE, getBatteryVoltage_Number(db.getArcGaugeLowWarningValue(selectedGaugeNumArc)));
                        _ui_slider_set_property(ui_LDASlider, _UI_SLIDER_PROPERTY_VALUE, getBatteryVoltage_Number(db.getArcGaugeLowAlertValue(selectedGaugeNumArc)));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, getBatteryVoltage_String(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, getBatteryVoltage_String(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_LWALabel, _UI_LABEL_PROPERTY_TEXT, getBatteryVoltage_String(db.getArcGaugeLowWarningValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_LDALabel, _UI_LABEL_PROPERTY_TEXT, getBatteryVoltage_String(db.getArcGaugeLowAlertValue(selectedGaugeNumArc)).c_str());

                        break;

                    case gauge_type::FUEL_LEVEL:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_LWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.WALevelText.c_str());
                        _ui_label_set_property(ui_LDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.DALevelText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue
                        lv_obj_set_style_bg_color(ui_LWAPanel, lv_color_hex(0x262700), LV_PART_MAIN | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_INDICATOR | LV_STATE_DEFAULT);
                        lv_obj_set_style_bg_color(ui_LWASlider, lv_color_hex(0xFFFF00), LV_PART_KNOB | LV_STATE_DEFAULT);

                        // Set the range for the sliders
                        lv_slider_set_range(ui_LWASlider, LEVEL_MIN_VALUE, LEVEL_MAX_VALUE);
                        lv_slider_set_range(ui_LDASlider, LEVEL_MIN_VALUE, LEVEL_MAX_VALUE);

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_LWASlider, _UI_SLIDER_PROPERTY_VALUE, db.getArcGaugeLowWarningValue(selectedGaugeNumArc));
                        _ui_slider_set_property(ui_LDASlider, _UI_SLIDER_PROPERTY_VALUE, db.getArcGaugeLowAlertValue(selectedGaugeNumArc));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_LWALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getArcGaugeLowWarningValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_LDALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getArcGaugeLowAlertValue(selectedGaugeNumArc)).c_str());

                        break;

                    case gauge_type::INJ_DUTY:

                        // Set the flags
                        _ui_flag_modify(ui_LDAPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LDASlider, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                        _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                        _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);

                        // Set the titles for the alerts and warnings
                        _ui_label_set_property(ui_HWATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.WAText.c_str());
                        _ui_label_set_property(ui_HDATittle, _UI_LABEL_PROPERTY_TEXT, settings_strings.DAText.c_str());

                        // Change the color of the Low Warning Alerts in this case to blue

                        // Set the range for the sliders
                        lv_slider_set_range(ui_HWASlider, DUTY_MIN_VALUE, DUTY_MAX_VALUE);
                        lv_slider_set_range(ui_HDASlider, DUTY_MIN_VALUE, DUTY_MAX_VALUE);

                        // Set the values for the sliders from the database
                        _ui_slider_set_property(ui_HWASlider, _UI_SLIDER_PROPERTY_VALUE, db.getArcGaugeHighWarningValue(selectedGaugeNumArc));
                        _ui_slider_set_property(ui_HDASlider, _UI_SLIDER_PROPERTY_VALUE, db.getArcGaugeHighAlertValue(selectedGaugeNumArc));

                        // Set the labels for the sliders
                        _ui_label_set_property(ui_HWALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getArcGaugeHighWarningValue(selectedGaugeNumArc)).c_str());
                        _ui_label_set_property(ui_HDALabel, _UI_LABEL_PROPERTY_TEXT, String(db.getArcGaugeHighAlertValue(selectedGaugeNumArc)).c_str());

                        break;
                    }
                }
                firstTimeBars = true;
                firstTimeArcs = false;
                firstTimeRpms = true;
                firstTimePanels = true;
                barChanged = true;
                barTypeChanged = true;
                arcChanged = false;
                arcTypeChanged = false;
                panelChanged = true;
                panelTypeChanged = true;
            }
            break;

            case 3: // Panels
            {
                if (firstTimePanels)
                {
                    // Show the select panel
                    _ui_flag_modify(ui_SelectPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
                    _ui_flag_modify(ui_LowAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
                    _ui_flag_modify(ui_HighAlertPanel, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);

                    // Setup the dropdowns
                    lv_dropdown_clear_options(ui_GaugeNumberD);
                    lv_dropdown_set_options(ui_GaugeNumberD, panel_number_options.c_str());
                    lv_dropdown_set_selected(ui_GaugeNumberD, 0);
                    lv_dropdown_clear_options(ui_GaugeTypeD);
                    lv_dropdown_set_options(ui_GaugeTypeD, panel_options.c_str());
                    lv_dropdown_set_selected(ui_GaugeTypeD, (int)(db.getPanelGaugeType(panel_number::PANEL_1)));
                }

                uint8_t rawPanelNumber = (uint8_t)(lv_dropdown_get_selected(ui_GaugeNumberD) + 1);
                panel_number selectedGaugeNumPanel = (panel_number)rawPanelNumber;
                gauge_type selectedGaugeTypePanel = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);

                if (previousPanelNumber != lv_dropdown_get_selected(ui_GaugeNumberD))
                {
                    panelChanged = true;
                    previousPanelNumber = lv_dropdown_get_selected(ui_GaugeNumberD);
                    lv_dropdown_set_selected(ui_GaugeTypeD, (int)(db.getPanelGaugeType(selectedGaugeNumPanel)));
                }

                if (previousPanelType != lv_dropdown_get_selected(ui_GaugeTypeD) || panelChanged)
                {
                    panelTypeChanged = true;
                    previousPanelType = lv_dropdown_get_selected(ui_GaugeTypeD);
                    selectedGaugeTypePanel = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);
                }

                firstTimeBars = true;
                firstTimeArcs = true;
                firstTimeRpms = true;
                firstTimePanels = false;
                barChanged = true;
                barTypeChanged = true;
                arcChanged = true;
                arcTypeChanged = true;
                panelChanged = false;
                panelTypeChanged = false;
            }
            break;
            }
        }



        void saveSettings(lv_event_t *e)
{
	switch (lv_roller_get_selected(ui_Roller))
	{
	case 0: // Rpms Settings
	{
		uint16_t rpmsWARNING = lv_slider_get_value(ui_HWASlider);
		uint16_t rpmsALERT = lv_slider_get_value(ui_HDASlider);

		db.saveRpmsWarning(rpmsWARNING);
		db.saveRpmsRedline(rpmsALERT);
	}
	break;

	case 1: // Bar Settings
	{
		uint16_t barsHighWarning = lv_slider_get_value(ui_HWASlider);
		uint16_t barsHighAlert = lv_slider_get_value(ui_HDASlider);
		uint16_t barsLowWarning = lv_slider_get_value(ui_LWASlider);
		uint16_t barsLowAlert = lv_slider_get_value(ui_LDASlider);

		uint8_t barNumberRaw = lv_dropdown_get_selected(ui_GaugeNumberD) + 1;
		bar_number_t barNumber = (bar_number_t)(barNumberRaw);
		gauge_type barType = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);

		db.saveBarGaugeHighAlertValue(barNumber, barsHighAlert);
		db.saveBarGaugeHighWarningValue(barNumber, barsHighWarning);
		db.saveBarGaugeLowAlertValue(barNumber, barsLowAlert);
		db.saveBarGaugeLowWarningValue(barNumber, barsLowWarning);
		db.saveBarGaugeType(barNumber, barType);
	}
	break;

	case 2: // Arcs Settings
	{
		uint16_t arcsHighWarning = lv_slider_get_value(ui_HWASlider);
		uint16_t arcsHighAlert = lv_slider_get_value(ui_HDASlider);
		uint16_t arcsLowWarning = lv_slider_get_value(ui_LWASlider);
		uint16_t arcsLowAlert = lv_slider_get_value(ui_LDASlider);

		uint8_t arcNumberRaw = lv_dropdown_get_selected(ui_GaugeNumberD) + 1;
		arc_number_t arcNumber = (arc_number_t)(arcNumberRaw);
		gauge_type arcType = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);

		db.saveArcGaugeHighAlertValue(arcNumber, arcsHighAlert);
		db.saveArcGaugeHighWarningValue(arcNumber, arcsHighWarning);
		db.saveArcGaugeLowAlertValue(arcNumber, arcsLowAlert);
		db.saveArcGaugeLowWarningValue(arcNumber, arcsLowWarning);
		db.saveArcGaugeType(arcNumber, arcType);
	}
	break;

	case 3: // Panel Settings
	{

		uint8_t panelNumberRaw = lv_dropdown_get_selected(ui_GaugeNumberD) + 1;
		panel_number_t panelNumber = (panel_number_t)(panelNumberRaw);
		gauge_type panelType = (gauge_type)lv_dropdown_get_selected(ui_GaugeTypeD);

		db.savePanelGaugeType(panelNumber, panelType);
	}
	break;
	}
}
